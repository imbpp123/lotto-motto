// Code generated by MockGen. DO NOT EDIT.
// Source: number_row_collection.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/imbpp123/lotto_motto/internal/lotto_number/model"
)

// MockNumberRowCollectionRepository is a mock of NumberRowCollectionRepository interface.
type MockNumberRowCollectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNumberRowCollectionRepositoryMockRecorder
}

// MockNumberRowCollectionRepositoryMockRecorder is the mock recorder for MockNumberRowCollectionRepository.
type MockNumberRowCollectionRepositoryMockRecorder struct {
	mock *MockNumberRowCollectionRepository
}

// NewMockNumberRowCollectionRepository creates a new mock instance.
func NewMockNumberRowCollectionRepository(ctrl *gomock.Controller) *MockNumberRowCollectionRepository {
	mock := &MockNumberRowCollectionRepository{ctrl: ctrl}
	mock.recorder = &MockNumberRowCollectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumberRowCollectionRepository) EXPECT() *MockNumberRowCollectionRepositoryMockRecorder {
	return m.recorder
}

// LoadFromFile mocks base method.
func (m *MockNumberRowCollectionRepository) LoadFromFile(filename string) (*model.NumberRowCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFromFile", filename)
	ret0, _ := ret[0].(*model.NumberRowCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFromFile indicates an expected call of LoadFromFile.
func (mr *MockNumberRowCollectionRepositoryMockRecorder) LoadFromFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFromFile", reflect.TypeOf((*MockNumberRowCollectionRepository)(nil).LoadFromFile), filename)
}
